/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.homepisec.android.homepisecapp.control.rest.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * AlarmStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-22T09:06:11.385+02:00")
public class AlarmStatus implements Parcelable {
  @SerializedName("countdownEnd")
  private DateTime countdownEnd = null;

  @SerializedName("countdownStart")
  private DateTime countdownStart = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISARMED("DISARMED"),
    
    ARMED("ARMED"),
    
    COUNTDOWN("COUNTDOWN"),
    
    TRIGGERED("TRIGGERED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("triggerStart")
  private DateTime triggerStart = null;

  public AlarmStatus countdownEnd(DateTime countdownEnd) {
    this.countdownEnd = countdownEnd;
    return this;
  }

   /**
   * Get countdownEnd
   * @return countdownEnd
  **/
  @ApiModelProperty(value = "")
  public DateTime getCountdownEnd() {
    return countdownEnd;
  }

  public void setCountdownEnd(DateTime countdownEnd) {
    this.countdownEnd = countdownEnd;
  }

  public AlarmStatus countdownStart(DateTime countdownStart) {
    this.countdownStart = countdownStart;
    return this;
  }

   /**
   * Get countdownStart
   * @return countdownStart
  **/
  @ApiModelProperty(value = "")
  public DateTime getCountdownStart() {
    return countdownStart;
  }

  public void setCountdownStart(DateTime countdownStart) {
    this.countdownStart = countdownStart;
  }

  public AlarmStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public AlarmStatus triggerStart(DateTime triggerStart) {
    this.triggerStart = triggerStart;
    return this;
  }

   /**
   * Get triggerStart
   * @return triggerStart
  **/
  @ApiModelProperty(value = "")
  public DateTime getTriggerStart() {
    return triggerStart;
  }

  public void setTriggerStart(DateTime triggerStart) {
    this.triggerStart = triggerStart;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmStatus alarmStatus = (AlarmStatus) o;
    return Objects.equals(this.countdownEnd, alarmStatus.countdownEnd) &&
        Objects.equals(this.countdownStart, alarmStatus.countdownStart) &&
        Objects.equals(this.state, alarmStatus.state) &&
        Objects.equals(this.triggerStart, alarmStatus.triggerStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countdownEnd, countdownStart, state, triggerStart);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmStatus {\n");
    
    sb.append("    countdownEnd: ").append(toIndentedString(countdownEnd)).append("\n");
    sb.append("    countdownStart: ").append(toIndentedString(countdownStart)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    triggerStart: ").append(toIndentedString(triggerStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(countdownEnd);

    out.writeValue(countdownStart);

    out.writeValue(state);

    out.writeValue(triggerStart);
  }

  public AlarmStatus() {
    super();
  }

  AlarmStatus(Parcel in) {
    
    countdownEnd = (DateTime)in.readValue(DateTime.class.getClassLoader());
    countdownStart = (DateTime)in.readValue(DateTime.class.getClassLoader());
    state = (StateEnum)in.readValue(null);
    triggerStart = (DateTime)in.readValue(DateTime.class.getClassLoader());
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<AlarmStatus> CREATOR = new Parcelable.Creator<AlarmStatus>() {
    public AlarmStatus createFromParcel(Parcel in) {
      return new AlarmStatus(in);
    }
    public AlarmStatus[] newArray(int size) {
      return new AlarmStatus[size];
    }
  };
}

