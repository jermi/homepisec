/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface AlarmStatus {
    "countdown"?: CountdownStatus;
    "state": AlarmStatusStateEnum;
    "trigger"?: TriggerStatus;
}

export type AlarmStatusStateEnum = "DISARMED" | "ARMED" | "COUNTDOWN" | "TRIGGERED";
export interface CountdownStatus {
    "end": number;
    "source": Device;
    "start": number;
}

export interface Device {
    "id": string;
    "type": DeviceTypeEnum;
}

export type DeviceTypeEnum = "SENSOR_MOTION" | "SENSOR_TEMP" | "RELAY" | "CONTROL";
export interface DeviceEvent {
    "device": Device;
    "payload": string;
    "time": number;
    "type": DeviceEventTypeEnum;
}

export type DeviceEventTypeEnum = "DEVICE_READ" | "ALARM_DISARM" | "ALARM_ARM" | "ALARM_COUNTDOWN" | "ALARM_TRIGGER" | "SWITCH_RELAY";
export interface DeviceReading {
    "device": Device;
    "value": string;
}

export interface SensorAppEndpoint {
    "alarmRelays": Array<Device>;
    "relays": Array<Device>;
    "url": string;
}

export interface SseEmitter {
    "timeout"?: number;
}

export interface TriggerStatus {
    "source": Device;
    "start": number;
}



/**
 * AlarmcontrollerApi - fetch parameter creator
 */
export const AlarmcontrollerApiFetchParamCreator = {
    /**
     * 
     * @summary getAlarmStatus
     */
    getAlarmStatusUsingGET(options?: any): FetchArgs {
        const baseUrl = `/api/alarm`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary postAlarmArm
     */
    postAlarmArmUsingPOST(options?: any): FetchArgs {
        const baseUrl = `/api/alarm/arm`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary postAlarmDisarm
     */
    postAlarmDisarmUsingPOST(options?: any): FetchArgs {
        const baseUrl = `/api/alarm/disarm`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * AlarmcontrollerApi - functional programming interface
 */
export const AlarmcontrollerApiFp = {
    /**
     * 
     * @summary getAlarmStatus
     */
    getAlarmStatusUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlarmStatus> {
        const fetchArgs = AlarmcontrollerApiFetchParamCreator.getAlarmStatusUsingGET(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary postAlarmArm
     */
    postAlarmArmUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlarmStatus> {
        const fetchArgs = AlarmcontrollerApiFetchParamCreator.postAlarmArmUsingPOST(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary postAlarmDisarm
     */
    postAlarmDisarmUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlarmStatus> {
        const fetchArgs = AlarmcontrollerApiFetchParamCreator.postAlarmDisarmUsingPOST(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * AlarmcontrollerApi - object-oriented interface
 */
export class AlarmcontrollerApi extends BaseAPI {
    /**
     * 
     * @summary getAlarmStatus
     */
    getAlarmStatusUsingGET(options?: any) {
        return AlarmcontrollerApiFp.getAlarmStatusUsingGET(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary postAlarmArm
     */
    postAlarmArmUsingPOST(options?: any) {
        return AlarmcontrollerApiFp.postAlarmArmUsingPOST(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary postAlarmDisarm
     */
    postAlarmDisarmUsingPOST(options?: any) {
        return AlarmcontrollerApiFp.postAlarmDisarmUsingPOST(options)(this.fetch, this.basePath);
    }
};

/**
 * AlarmcontrollerApi - factory interface
 */
export const AlarmcontrollerApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getAlarmStatus
         */
        getAlarmStatusUsingGET(options?: any) {
            return AlarmcontrollerApiFp.getAlarmStatusUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary postAlarmArm
         */
        postAlarmArmUsingPOST(options?: any) {
            return AlarmcontrollerApiFp.postAlarmArmUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary postAlarmDisarm
         */
        postAlarmDisarmUsingPOST(options?: any) {
            return AlarmcontrollerApiFp.postAlarmDisarmUsingPOST(options)(fetch, basePath);
        },
    };
};


/**
 * EndpointcontrollerApi - fetch parameter creator
 */
export const EndpointcontrollerApiFetchParamCreator = {
    /**
     * 
     * @summary addOrUpdate
     * @param endpoint endpoint
     */
    addOrUpdateUsingPOST(params: {  "endpoint": SensorAppEndpoint; }, options?: any): FetchArgs {
        // verify required parameter "endpoint" is set
        if (params["endpoint"] == null) {
            throw new Error("Missing required parameter endpoint when calling addOrUpdateUsingPOST");
        }
        const baseUrl = `/api/api`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["endpoint"]) {
            fetchOptions.body = JSON.stringify(params["endpoint"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary getEndpoints
     */
    getEndpointsUsingGET(options?: any): FetchArgs {
        const baseUrl = `/api/api`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * EndpointcontrollerApi - functional programming interface
 */
export const EndpointcontrollerApiFp = {
    /**
     * 
     * @summary addOrUpdate
     * @param endpoint endpoint
     */
    addOrUpdateUsingPOST(params: { "endpoint": SensorAppEndpoint;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = EndpointcontrollerApiFetchParamCreator.addOrUpdateUsingPOST(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary getEndpoints
     */
    getEndpointsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SensorAppEndpoint>> {
        const fetchArgs = EndpointcontrollerApiFetchParamCreator.getEndpointsUsingGET(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * EndpointcontrollerApi - object-oriented interface
 */
export class EndpointcontrollerApi extends BaseAPI {
    /**
     * 
     * @summary addOrUpdate
     * @param endpoint endpoint
     */
    addOrUpdateUsingPOST(params: {  "endpoint": SensorAppEndpoint; }, options?: any) {
        return EndpointcontrollerApiFp.addOrUpdateUsingPOST(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary getEndpoints
     */
    getEndpointsUsingGET(options?: any) {
        return EndpointcontrollerApiFp.getEndpointsUsingGET(options)(this.fetch, this.basePath);
    }
};

/**
 * EndpointcontrollerApi - factory interface
 */
export const EndpointcontrollerApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary addOrUpdate
         * @param endpoint endpoint
         */
        addOrUpdateUsingPOST(params: {  "endpoint": SensorAppEndpoint; }, options?: any) {
            return EndpointcontrollerApiFp.addOrUpdateUsingPOST(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary getEndpoints
         */
        getEndpointsUsingGET(options?: any) {
            return EndpointcontrollerApiFp.getEndpointsUsingGET(options)(fetch, basePath);
        },
    };
};


/**
 * ReadingscontrollerApi - fetch parameter creator
 */
export const ReadingscontrollerApiFetchParamCreator = {
    /**
     * 
     * @summary getReadings
     */
    getReadingsUsingGET(options?: any): FetchArgs {
        const baseUrl = `/api/readings`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary postReadings
     * @param readings readings
     */
    postReadingsUsingPOST(params: {  "readings": Array<DeviceReading>; }, options?: any): FetchArgs {
        // verify required parameter "readings" is set
        if (params["readings"] == null) {
            throw new Error("Missing required parameter readings when calling postReadingsUsingPOST");
        }
        const baseUrl = `/api/readings`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["readings"]) {
            fetchOptions.body = JSON.stringify(params["readings"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @summary subscribeUpdates
     */
    subscribeUpdatesUsingGET(options?: any): FetchArgs {
        const baseUrl = `/api/readings/events`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * ReadingscontrollerApi - functional programming interface
 */
export const ReadingscontrollerApiFp = {
    /**
     * 
     * @summary getReadings
     */
    getReadingsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DeviceEvent>> {
        const fetchArgs = ReadingscontrollerApiFetchParamCreator.getReadingsUsingGET(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary postReadings
     * @param readings readings
     */
    postReadingsUsingPOST(params: { "readings": Array<DeviceReading>;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = ReadingscontrollerApiFetchParamCreator.postReadingsUsingPOST(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @summary subscribeUpdates
     */
    subscribeUpdatesUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SseEmitter> {
        const fetchArgs = ReadingscontrollerApiFetchParamCreator.subscribeUpdatesUsingGET(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ReadingscontrollerApi - object-oriented interface
 */
export class ReadingscontrollerApi extends BaseAPI {
    /**
     * 
     * @summary getReadings
     */
    getReadingsUsingGET(options?: any) {
        return ReadingscontrollerApiFp.getReadingsUsingGET(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary postReadings
     * @param readings readings
     */
    postReadingsUsingPOST(params: {  "readings": Array<DeviceReading>; }, options?: any) {
        return ReadingscontrollerApiFp.postReadingsUsingPOST(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @summary subscribeUpdates
     */
    subscribeUpdatesUsingGET(options?: any) {
        return ReadingscontrollerApiFp.subscribeUpdatesUsingGET(options)(this.fetch, this.basePath);
    }
};

/**
 * ReadingscontrollerApi - factory interface
 */
export const ReadingscontrollerApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getReadings
         */
        getReadingsUsingGET(options?: any) {
            return ReadingscontrollerApiFp.getReadingsUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary postReadings
         * @param readings readings
         */
        postReadingsUsingPOST(params: {  "readings": Array<DeviceReading>; }, options?: any) {
            return ReadingscontrollerApiFp.postReadingsUsingPOST(params, options)(fetch, basePath);
        },
        /**
         * 
         * @summary subscribeUpdates
         */
        subscribeUpdatesUsingGET(options?: any) {
            return ReadingscontrollerApiFp.subscribeUpdatesUsingGET(options)(fetch, basePath);
        },
    };
};


/**
 * RelaycontrollerApi - fetch parameter creator
 */
export const RelaycontrollerApiFetchParamCreator = {
    /**
     * 
     * @summary switchRelay
     * @param relayId relayId
     * @param value value
     */
    switchRelayUsingPOST(params: {  "relayId"?: string; "value"?: boolean; }, options?: any): FetchArgs {
        const baseUrl = `/api/relays/switch`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "relayId": params["relayId"],
            "value": params["value"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = Object.assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * RelaycontrollerApi - functional programming interface
 */
export const RelaycontrollerApiFp = {
    /**
     * 
     * @summary switchRelay
     * @param relayId relayId
     * @param value value
     */
    switchRelayUsingPOST(params: { "relayId"?: string; "value"?: boolean;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = RelaycontrollerApiFetchParamCreator.switchRelayUsingPOST(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * RelaycontrollerApi - object-oriented interface
 */
export class RelaycontrollerApi extends BaseAPI {
    /**
     * 
     * @summary switchRelay
     * @param relayId relayId
     * @param value value
     */
    switchRelayUsingPOST(params: {  "relayId"?: string; "value"?: boolean; }, options?: any) {
        return RelaycontrollerApiFp.switchRelayUsingPOST(params, options)(this.fetch, this.basePath);
    }
};

/**
 * RelaycontrollerApi - factory interface
 */
export const RelaycontrollerApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary switchRelay
         * @param relayId relayId
         * @param value value
         */
        switchRelayUsingPOST(params: {  "relayId"?: string; "value"?: boolean; }, options?: any) {
            return RelaycontrollerApiFp.switchRelayUsingPOST(params, options)(fetch, basePath);
        },
    };
};

